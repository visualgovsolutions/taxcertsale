scalar JSON

# Base Query type
type Query {
  _empty: String # Placeholder field to ensure Query type is valid
  hello: String # Simple test query
  auctions: [Auction!]! # Add the auctions query returning a list of Auctions
  auction(id: ID!): Auction # Add the auction query returning a single Auction by ID
  auctionsByCounty(countyId: String!): [Auction!]! # Add query to get auctions by county ID
  upcomingAuctions: [Auction!]! # Add query to get upcoming auctions
  activeAuctions: [Auction!]! # Add query to get active auctions
  auctionsByStatus(status: AuctionStatus!): [Auction!]! # Add query to get auctions by status
  auctionManagementData: AuctionManagementData! # Add management data query
  counties: [County!]!
  county(id: ID!): County
  users: [User!]! # Query to get all users
  user(id: ID!): User # Query to get a single user by ID
  usersRegisteredTodayCount: Int! # Query for count of users registered today
  
  # System settings related queries
  systemSettings: SystemSettings!
  feeStructure: FeeStructure!
  notificationSettings: NotificationSettings!
  securitySettings: SecuritySettings!
  complianceReports: [ComplianceReport!]!
  
  # Activity logs queries
  activityLogs(filter: ActivityLogFilterInput, limit: Int, offset: Int, page: Int): ActivityLogResponse!
  activityLogsByResource(resource: String!, id: ID, limit: Int, offset: Int): ActivityLogResponse!
  activityLogsByUser(userId: ID!, limit: Int, offset: Int): ActivityLogResponse!
  
  # Dashboard Analytics
  certificatesSummary: CertificatesSummary!
  userActivity(timeRange: String!): [ActivityDataPoint!]!
  redemptionRate(timeRange: String!): [RedemptionRatePoint!]!
  
  # Certificate queries
  certificates(filter: CertificateFilterInput, limit: Int, offset: Int, page: Int): CertificateResponse!
  certificate(id: ID!): Certificate
  certificatesByStatus(status: CertificateStatus!): [Certificate!]!
  certificatesByCounty(countyId: ID!): [Certificate!]!
  certificatesByAuction(auctionId: ID!): [Certificate!]!
}

# Base Mutation type (can be added later)
# type Mutation {
#   _empty: String
# }

# Define other types (e.g., User, Certificate) here later 

enum AuctionStatus {
  UPCOMING
  ACTIVE
  COMPLETED
  CANCELLED
}

type Auction {
  id: ID!
  name: String!
  auctionDate: String!
  startTime: String!
  endTime: String
  status: AuctionStatus!
  description: String
  location: String
  registrationUrl: String
  metadata: JSON
  countyId: String!
  createdAt: String!
  updatedAt: String!
}

# --- User Types ---
enum UserStatus {
  ACTIVE
  INACTIVE
  PENDING_KYC
  SUSPENDED
}

enum UserRole {
  ADMIN
  COUNTY_OFFICIAL
  INVESTOR
  USER
}

type User {
  id: ID!
  username: String!
  email: String!
  role: String!
  status: UserStatus!
  kycStatus: String 
  createdAt: String!
  updatedAt: String!
}

input CreateUserInput {
  username: String!
  email: String!
  role: UserRole!
  password: String!
}

input UpdateUserInput {
  username: String
  email: String
  role: UserRole
  # Allow updating user status via admin interface
  status: String 
  # Allow updating KYC status via admin interface
  kycStatus: String 
}

type Mutation {
  startAuction(id: ID!): Auction
  completeAuction(id: ID!): Auction
  cancelAuction(id: ID!): Auction
  createCounty(input: CreateCountyInput!): County!
  updateCounty(id: ID!, input: UpdateCountyInput!): County
  deleteCounty(id: ID!): County
  createUser(input: CreateUserInput!): User!
  updateUser(id: ID!, input: UpdateUserInput!): User
  deleteUser(id: ID!): User
  login(email: String!, password: String!): AuthPayload!
  updateUserStatus(id: ID!, status: UserStatus!, reason: String): User!
  
  # System settings related mutations
  updateSystemSettings(input: SystemSettingsInput!): SystemSettings!
  updatePasswordPolicy(input: PasswordPolicyInput!): PasswordPolicy!
  updateSessionSettings(input: SessionSettingsInput!): SessionSettings!
  updateEmailNotificationSettings(input: EmailNotificationSettingsInput!): EmailNotificationSettings!
  updateSystemNotificationSettings(input: SystemNotificationSettingsInput!): SystemNotificationSettings!
  updateTwoFactorAuth(input: TwoFactorAuthInput!): TwoFactorAuth!
  
  # Fee structure related mutations
  updateCertificateFee(id: ID!, input: CertificateFeeInput!): CertificateFee!
  addCertificateFee(input: CertificateFeeInput!): CertificateFee!
  deleteCertificateFee(id: ID!): CertificateFee!
  updateInterestRateLimits(input: InterestRateLimitsInput!): InterestRateLimits!
  updatePlatformFee(id: ID!, input: PlatformFeeInput!): PlatformFee!
  
  # Compliance report generation
  generateComplianceReport(type: String!, parameters: JSON!): ComplianceReport!
  
  # Activity log mutations
  createActivityLog(input: ActivityLogInput!): ActivityLog!
  
  # Certificate mutations
  createCertificate(input: CreateCertificateInput!): Certificate!
  updateCertificate(id: ID!, input: UpdateCertificateInput!): Certificate
  deleteCertificate(id: ID!): Boolean!
  assignCertificatesToAuction(certificateIds: [ID!]!, auctionId: ID!): Int!
  markCertificateAsRedeemed(id: ID!, redemptionDate: String!): Certificate!
  updateCertificateStatus(id: ID!, status: CertificateStatus!): Certificate!
}

# Management data type

type AuctionManagementData {
  activeAuctions: Int!
  upcomingAuctions: Int!
  completedAuctions: Int!
  totalAuctions: Int!
}

# --- County Type ---
type County {
  id: ID!
  name: String!
  state: String!
  countyCode: String!
  websiteUrl: String
  taxCollectorUrl: String
  propertyAppraiserUrl: String
  description: String
  latitude: Float
  longitude: Float
  createdAt: String! # Consider using a DateTime scalar if needed
  updatedAt: String! # Consider using a DateTime scalar if needed
}

# --- County Input Types ---
input CreateCountyInput {
  name: String!
  state: String!
  countyCode: String!
  websiteUrl: String
  taxCollectorUrl: String
  propertyAppraiserUrl: String
  description: String
  latitude: Float
  longitude: Float
}

input UpdateCountyInput {
  name: String
  state: String
  countyCode: String
  websiteUrl: String
  taxCollectorUrl: String
  propertyAppraiserUrl: String
  description: String
  latitude: Float
  longitude: Float
}

# Auth Types

type AuthPayload {
  accessToken: String!
  user: User!
}

# --- System Settings Types ---
type SystemSettings {
  applicationName: String!
  supportEmail: String!
  supportPhone: String
  timezone: String!
  dateFormat: String!
  maintenanceMode: Boolean!
  privacyPolicy: String
  termsOfService: String
}

input SystemSettingsInput {
  applicationName: String
  supportEmail: String
  supportPhone: String
  timezone: String
  dateFormat: String
  maintenanceMode: Boolean
  privacyPolicy: String
  termsOfService: String
}

# --- Fee Structure Types ---
type FeeStructure {
  id: ID!
  certificateFees: [CertificateFee!]!
  interestRateLimits: InterestRateLimits!
  platformFees: [PlatformFee!]!
}

type CertificateFee {
  id: ID!
  name: String!
  description: String
  type: String!
  value: Float!
  isPercentage: Boolean!
  minAmount: Float
  maxAmount: Float
  active: Boolean!
}

input CertificateFeeInput {
  name: String!
  description: String
  type: String!
  value: Float!
  isPercentage: Boolean!
  minAmount: Float
  maxAmount: Float
  active: Boolean!
}

type InterestRateLimits {
  minRate: Float!
  maxRate: Float!
  defaultRate: Float!
}

input InterestRateLimitsInput {
  minRate: Float!
  maxRate: Float!
  defaultRate: Float!
}

type PlatformFee {
  id: ID!
  name: String!
  description: String
  value: Float!
  isPercentage: Boolean!
  minAmount: Float
  maxAmount: Float
  applicableUserRoles: [String!]
  active: Boolean!
}

input PlatformFeeInput {
  name: String!
  description: String
  value: Float!
  isPercentage: Boolean!
  minAmount: Float
  maxAmount: Float
  applicableUserRoles: [String!]
  active: Boolean!
}

# --- Notification Settings Types ---
type NotificationSettings {
  emailNotifications: EmailNotificationSettings!
  systemNotifications: SystemNotificationSettings!
  smsNotifications: SmsNotificationSettings!
}

type EmailNotificationSettings {
  enabled: Boolean!
  fromName: String
  fromEmail: String
  replyToEmail: String
  smtpHost: String
  smtpPort: String
  smtpUsername: String
  smtpSecure: Boolean
  emailTemplates: [EmailTemplate!]!
}

input EmailNotificationSettingsInput {
  enabled: Boolean!
  fromName: String
  fromEmail: String
  replyToEmail: String
  smtpHost: String
  smtpPort: String
  smtpUsername: String
  smtpPassword: String
  smtpSecure: Boolean
}

type EmailTemplate {
  id: ID!
  name: String!
  subject: String!
  bodyHtml: String!
  bodyText: String!
  eventType: String!
  active: Boolean!
}

type SystemNotificationSettings {
  userRegistration: Boolean!
  certificatePurchase: Boolean!
  auctionStart: Boolean!
  auctionEnd: Boolean!
  certificateRedemption: Boolean!
  certificateExpiration: Boolean!
  kyc: Boolean!
}

input SystemNotificationSettingsInput {
  userRegistration: Boolean
  certificatePurchase: Boolean
  auctionStart: Boolean
  auctionEnd: Boolean
  certificateRedemption: Boolean
  certificateExpiration: Boolean
  kyc: Boolean
}

type SmsNotificationSettings {
  enabled: Boolean!
  provider: String
  accountSid: String
  apiKey: String
  phoneNumber: String
}

# --- Security Settings Types ---
type SecuritySettings {
  passwordPolicy: PasswordPolicy!
  sessionSettings: SessionSettings!
  twoFactorAuth: TwoFactorAuth!
  ipSecurity: IpSecurity!
}

type PasswordPolicy {
  minLength: Int!
  requireUppercase: Boolean!
  requireLowercase: Boolean!
  requireNumbers: Boolean!
  requireSpecialChars: Boolean!
  passwordExpiryDays: Int
  preventPasswordReuse: Boolean!
  maxLoginAttempts: Int
}

input PasswordPolicyInput {
  minLength: Int!
  requireUppercase: Boolean
  requireLowercase: Boolean
  requireNumbers: Boolean
  requireSpecialChars: Boolean
  passwordExpiryDays: Int
  preventPasswordReuse: Boolean
  maxLoginAttempts: Int
}

type SessionSettings {
  sessionTimeoutMinutes: Int!
  rememberMeDurationDays: Int
  enforceOneSessionPerUser: Boolean!
  tokenExpirationHours: Int!
}

input SessionSettingsInput {
  sessionTimeoutMinutes: Int!
  rememberMeDurationDays: Int
  enforceOneSessionPerUser: Boolean
  tokenExpirationHours: Int!
}

type TwoFactorAuth {
  enabled: Boolean!
  requiredForRoles: [String!]
  allowRememberDevice: Boolean!
  rememberDeviceDurationDays: Int
}

input TwoFactorAuthInput {
  enabled: Boolean!
  requiredForRoles: [String!]
  allowRememberDevice: Boolean
  rememberDeviceDurationDays: Int
}

type IpSecurity {
  whitelistEnabled: Boolean!
  ipWhitelist: String
  blacklistEnabled: Boolean!
  ipBlacklist: String
  maxRequestsPerMinute: Int
}

# --- Compliance Report Types ---
type ComplianceReport {
  id: ID!
  type: ReportType!
  generatedAt: String!
  status: ReportStatus!
  downloadUrl: String
  parameters: JSON
}

enum ReportType {
  TAX_1099_INT
  CHAPTER_197
  AUCTION_COMPLIANCE
}

enum ReportStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
}

# Activity Log Types
type ActivityLog {
  id: ID!
  timestamp: String!
  user: User
  action: String!
  resource: String!
  resourceId: String
  status: String!
  details: String
  userAgent: String
  ipAddress: String
}

type ActivityLogResponse {
  totalCount: Int!
  logs: [ActivityLog!]!
}

input ActivityLogFilterInput {
  fromDate: String
  toDate: String
  actions: [String!]
  resources: [String!]
  statuses: [String!]
  userId: ID
  searchTerm: String
}

input ActivityLogInput {
  timestamp: String!
  user: ID!
  action: String!
  resource: String!
  resourceId: String
  status: String!
  details: String
  userAgent: String
  ipAddress: String
}

# New types for dashboard analytics
type CertificatesSummary {
  total: Int!
  redeemed: Int!
  available: Int!
  activeInAuction: Int!
  totalValue: Float!
}

type ActivityDataPoint {
  date: String!
  count: Int!
}

type RedemptionRatePoint {
  date: String!
  rate: Float!
}

# --- Certificate Types ---
type Certificate {
  id: ID!
  certificateNumber: String!
  countyId: String!
  parcelId: String!
  propertyAddress: String
  ownerName: String
  faceValue: Float!
  auctionDate: String
  status: CertificateStatus!
  interestRate: Float
  purchaserId: String
  purchaseDate: String
  redemptionDate: String
  expirationDate: String
  batchId: String
  createdAt: String!
  updatedAt: String!
}

enum CertificateStatus {
  PENDING
  AVAILABLE
  AUCTION_SCHEDULED
  AUCTION_ACTIVE
  AUCTION_CLOSED
  SOLD
  REDEEMED
  EXPIRED
}

input CertificateFilterInput {
  statuses: [CertificateStatus!]
  countyId: String
  auctionId: String
  fromDate: String
  toDate: String
  minFaceValue: Float
  maxFaceValue: Float
  searchTerm: String
}

type CertificateResponse {
  totalCount: Int!
  certificates: [Certificate!]!
}

input CreateCertificateInput {
  certificateNumber: String!
  countyId: String!
  parcelId: String!
  propertyAddress: String
  ownerName: String
  faceValue: Float!
  auctionDate: String
  status: CertificateStatus!
  interestRate: Float
  batchId: String
}

input UpdateCertificateInput {
  certificateNumber: String
  countyId: String
  parcelId: String
  propertyAddress: String
  ownerName: String
  faceValue: Float
  auctionDate: String
  status: CertificateStatus
  interestRate: Float
  purchaserId: String
  purchaseDate: String
  redemptionDate: String
  expirationDate: String
  batchId: String
} 